# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rOCWhYt_6WSlvNLWVjPFT-gKC-tIbWUH
"""

!pip install selenium
!apt-get update # for Chromium
!apt install chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin

import sys
sys.path.insert(0, '/usr/lib/chromium-browser/chromedriver')

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time
import pandas as pd
from bs4 import BeautifulSoup

# Set up Selenium for headless operation in Colab
options = Options()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')

driver = webdriver.Chrome(options=options)

base_url = "https://www.electrifying.com"
cars_data = []

# Step 1: Scrape all car cards
for page in range(1, 17):  # Pages 1 to 16
    print(f"Processing page {page}")
    url = f"{base_url}/discovery?carType=new&carEngineType=electric&page={page}"
    driver.get(url)
    time.sleep(5)

    for _ in range(3):
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(1)

    soup = BeautifulSoup(driver.page_source, 'html.parser')
    cards = soup.find_all('div', class_='car-card')

    for card in cards:
        try:
            name = card.find('h4', class_='car-card__title').text.strip()
            score_tag = card.find('div', class_='rate__number')
            score = score_tag.text.strip() if score_tag else "N/A"
            price_tag = card.find('span', class_='car-card__price')
            price = price_tag.text.strip().replace("From: ", "") if price_tag else "N/A"
            range_tag = card.find('span', class_='car-card__range')
            range_ = range_tag.text.strip().replace("Range: ", "") if range_tag else "N/A"
            link = card.find('a')['href']
            full_link = base_url + link

            cars_data.append({
                "name": name,
                "score": score,
                "price": price,
                "range ": range_,
                "url": full_link
            })
        except Exception as e:
            print(f"‚ö†Ô∏è Error parsing card: {e}")
            continue

print(f"‚úÖ Total cars found: {len(cars_data)}")

# Step 2: Scrape each car's detail page
def get_car_details(url):
    try:
        driver.get(url)
        time.sleep(3)
        detail_soup = BeautifulSoup(driver.page_source, 'html.parser')
        props = detail_soup.find_all('li', class_='property-list__item')

        battery = maxdc = miles_per_kwh = "N/A"

        for prop in props:
            text = prop.get_text(strip=True)
            if "Battery size" in text:
                battery = text.replace("Battery size:", "").strip()
            elif "Max charge rate" in text:
                maxdc = text.replace("Max charge rate:", "").strip()
            elif "Miles per kWh" in text:
                miles_per_kwh = text.replace("Miles per kWh:", "").strip()

        return battery, maxdc, miles_per_kwh

    except Exception as e:
        print(f"‚ùå Error at {url}: {e}")
        return "N/A", "N/A", "N/A"

# Step 3: Append details to each car entry
for car in cars_data:
    print(f"üîé Scraping details for: {car['name']}")
    battery, maxdc, miles_per_kwh = get_car_details(car['url'])
    car["battery_size"] = battery
    car["max_dc_charge"] = maxdc
    car["miles_per_kwh"] = miles_per_kwh

# Step 4: Save to CSV
df = pd.DataFrame(cars_data)
df.to_csv("electric_cars.csv", index=False)
print("‚úÖ Data saved to electric_cars.csv")

from google.colab import files
files.download("electric_cars.csv")

"""# **Cleaning**"""

import pandas as pd
import numpy as np
import re
from google.colab import files

# STEP 2: Upload the CSV file
uploaded = files.upload()
# Load the data
df = pd.read_csv('electric_cars_1.csv')

# Helper function to safely convert to float
def safe_float(x):
    try:
        return float(x)
    except:
        return np.nan

# 1. Clean price column
# Remove ¬£ and commas, convert to numeric
df['price'] = df['price'].str.replace('¬£', '').str.replace(',', '')
df['price'] = df['price'].apply(safe_float)

# Calculate average price and fill missing values
avg_price = round(df['price'].mean())
df['price'] = df['price'].fillna(avg_price).astype(int)

# 2. Clean range column
# Remove 'mi' and convert to numeric
df['range'] = df['range '].str.replace('mi', '', regex=False).apply(safe_float)

# Calculate average range and fill missing values
avg_range = round(df['range'].mean())
df['range'] = df['range'].fillna(avg_range).astype(int)
df = df.drop(columns=['range '])  # Remove the original column with space

# 3. Clean battery_size column
# Remove 'kWh' variations and 'Battery sizes:' prefix
df['battery_size'] = df['battery_size'].str.replace('kWh', '', regex=False)\
                       .str.replace('kwh', '', regex=False)\
                       .str.replace('Battery sizes: ', '', regex=False)\
                       .str.replace('Wh', '', regex=False)\
                       .str.replace(' ', '', regex=False)

# Function to handle ranges and calculate average
def process_battery_size(value):
    if pd.isna(value) or value == 'N/A':
        return np.nan
    if '-' in value:
        parts = value.split('-')
        try:
            return (float(parts[0]) + float(parts[1])) / 2
        except:
            return np.nan
    try:
        return float(value)
    except:
        return np.nan

df['battery_size'] = df['battery_size'].apply(process_battery_size)

# Calculate average battery size and fill missing values
avg_battery = round(df['battery_size'].mean())
df['battery_size'] = df['battery_size'].fillna(avg_battery).astype(int)

# 4. Clean miles_per_kwh column
# Convert to numeric, handling N/A and estimates
df['miles_per_kwh'] = df['miles_per_kwh'].str.replace('(est)', '', regex=False)\
                        .str.replace('(tested)', '', regex=False)\
                        .str.replace('(claimed)', '', regex=False)\
                        .str.replace('N/A', '', regex=False)\
                        .str.replace(' ', '', regex=False)

# Extract first numeric value when there's a range
def process_miles_per_kwh(value):
    if pd.isna(value) or value == '':
        return np.nan
    # Handle cases like "3.8. - 4.1" by taking first value
    if '.' in value and '-' in value:
        parts = value.split('-')
        try:
            return float(parts[0].strip())
        except:
            return np.nan
    try:
        return float(value)
    except:
        return np.nan

df['miles_per_kwh'] = df['miles_per_kwh'].apply(process_miles_per_kwh)

# Calculate average and fill missing values
avg_miles = round(df['miles_per_kwh'].mean(), 1)
df['miles_per_kwh'] = df['miles_per_kwh'].fillna(avg_miles).round(1)
# 5. Clean max_dc_charge column
def clean_max_dc_charge(value):
    if pd.isna(value) or value == 'N/A':
        return np.nan

    # Remove 'kW' and any parentheses content like (est)
    cleaned = str(value).replace('kW', '').replace(' ', '')\
                        .split('(')[0].strip()

    # Handle ranges (value-value)
    if '-' in cleaned:
        parts = cleaned.split('-')
        try:
            return (float(parts[0]) + float(parts[1])) / 2
        except:
            return np.nan

    try:
        return float(cleaned)
    except:
        return np.nan

df['max_dc_charge'] = df['max_dc_charge'].apply(clean_max_dc_charge)

# Calculate average and fill missing values
avg_max_charge = round(df['max_dc_charge'].mean())
df['max_dc_charge'] = df['max_dc_charge'].fillna(avg_max_charge).astype(int)

# Save the cleaned data again
df.to_csv('electric_cars_cleaned.csv', index=False)

print(f"Used average for max_dc_charge: {avg_max_charge}")

# Save cleaned data
df.to_csv('electric_cars_cleaned.csv', index=False)

print("Data cleaning complete. Saved to electric_cars_cleaned.csv")
print(f"Used averages: Price={avg_price}, Range={avg_range}, Battery={avg_battery}, Miles/kWh={avg_miles}")

files.download('electric_cars_cleaned.csv')
